import{_ as t,c as r,a2 as o,o as a}from"./chunks/framework.RKshPt33.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Docker/基本概念/容器(Container).md","filePath":"Docker/基本概念/容器(Container).md","lastUpdated":1728983294000}'),n={name:"Docker/基本概念/容器(Container).md"};function s(i,e,l,c,p,d){return a(),r("div",null,e[0]||(e[0]=[o('<p><strong>Docker 容器</strong> 是一个轻量级、可移植的运行时环境，它基于 Docker 镜像创建，用于运行应用程序及其所有依赖项。容器提供了应用的隔离性和一致性，使得在不同环境中运行的应用表现相同。</p><h3 id="主要特点" tabindex="-1">主要特点： <a class="header-anchor" href="#主要特点" aria-label="Permalink to &quot;主要特点：&quot;">​</a></h3><ol><li><p><strong>轻量级</strong>：容器共享宿主操作系统的内核，因此启动速度快且资源占用少。</p></li><li><p><strong>隔离性</strong>：每个容器都有独立的文件系统、网络和进程空间，确保应用之间的互不干扰。</p></li><li><p><strong>可移植性</strong>：容器可以在任何支持 Docker 的环境中运行，从开发到测试再到生产环境，保持一致性。</p></li><li><p><strong>快速部署</strong>：容器可以快速启动和停止，适合微服务架构和动态负载。</p></li><li><p><strong>易于管理</strong>：通过 Docker 命令，可以方便地创建、启动、停止和删除容器，支持自动化管理。</p></li></ol><blockquote><p>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 <a href="https://yeasy.gitbook.io/docker_practice/data_management/volume" target="_blank" rel="noreferrer">数据卷（Volume）</a>、或者 <a href="https://yeasy.gitbook.io/docker_practice/data_management/bind-mounts" target="_blank" rel="noreferrer">绑定宿主目录</a></p></blockquote>',4)]))}const k=t(n,[["render",s]]);export{_ as __pageData,k as default};
